package bls12

import (
	"crypto/rand"
	"testing"
)

func TestFeldman(t *testing.T) {
	threshold := uint64(3)
	numShares := uint64(10)
	_, shares, priv, err := CreateShares(rand.Reader, nil, threshold, numShares)
	if err != nil {
		t.Fatal(err)
	}

	// minimum required number of shares
	newPriv, err := PrivKeyFromShares(shares[:threshold])
	if err != nil {
		t.Fatal(err)
	}
	if newPriv.Secret.Cmp(priv.Secret) != 0 {
		t.Errorf("expected: %s, got: %s\n", priv.Secret, newPriv.Secret)
	}

	// all shares
	newPriv, err = PrivKeyFromShares(shares)
	if err != nil {
		t.Fatal(err)
	}
	if newPriv.Secret.Cmp(priv.Secret) != 0 {
		t.Errorf("expected: %s, got: %s\n", priv.Secret, newPriv.Secret)
	}

	// not enough shares
	newPriv, err = PrivKeyFromShares(shares[:threshold-1])
	if err != nil {
		t.Fatal(err)
	}
	if newPriv.Secret.Cmp(priv.Secret) == 0 {
		t.Errorf("expected: %s, got: %s\n", priv.Secret, newPriv.Secret)
	}

	/*

		// generated shares must be valid
		for _, share := range shares {
			if err := VerifyShare(share, verificationVec); err != nil {
				t.Fatalf("Share is not valid: index %d, value %v\n", share.X, share.Y)
			}
		}


			invalidShare := &Share{
				X: 3,
				Y: privKeyFromScalar(new(big.Int).SetUint64(6)),
			}
			if err := VerifyShare(invalidShare, verificationVec); err == nil {
				t.Fatal("pub keys must be different")
			}
	*/
}

/*
func TestOther(t *testing.T) {

		52435875175126190479447740508185965837690552500527637822603658699938581184513
		3125875175126190479447740508185965837690552500527637822603658699938581184513
		evaluation
		55561750350252380958895481016371931675381105001055275645207317399877162369026
		evaluation
		58687625525378571438343221524557897513071657501582913467810976099815743553539
		evaluation
		61813500700504761917790962032743863350762210002110551290414634799754324738052
		evaluation
		64939375875630952397238702540929829188452762502638189113018293499692905922565
		&{{{[10408769643250622720 2345704723026019748 5764050826930660300 16932688520549981950 12638243895867944189 1347271320892002954] [16327326430321776478 12577525924151699988 4724691425143366414 6492886082940092771 654491619317802167 687260919319613399]} {[13101130389879461643 12275092432127721348 7921964544383630608 794507732804170377 9699556328924910690 1120209500628278951] [17562982492449493247 8252260492134587820 12542731098405314935 15878893823957000934 18009235365069411479 368419509020682802]} {[8505329371266088957 17002214543764226050 6865905132761471162 8632934651105793861 6631298214892334189 1582556514881692819] [0 0 0 0 0 0]} {[8505329371266088957 17002214543764226050 6865905132761471162 8632934651105793861 6631298214892334189 1582556514881692819] [0 0 0 0 0 0]}}}
		{{{[10201327252761176950 5530304860947262756 5472638578806644650 10856059749279520097 590316685604009730 845019556071469083] [1783145280136580580 7089197839178570150 7978731501626587784 12129941440582127294 14338273502560710703 1133085731838407924]} {[4255828229954441141 15408064557486190590 11856247659163521549 3542016442345075931 15377081704322339889 1037279582931800074] [531547776046386621 18375434559981856723 1268386054440337246 15198327970265057366 9390624946964995179 1444701561556988447]} {[8505329371266088957 17002214543764226050 6865905132761471162 8632934651105793861 6631298214892334189 1582556514881692819] [0 0 0 0 0 0]} {[8505329371266088957 17002214543764226050 6865905132761471162 8632934651105793861 6631298214892334189 1582556514881692819] [0 0 0 0 0 0]}}}

	one, _ := new(big.Int).SetString("52435875175126190479447740508185965837690552500527637822603658699938581184513", 10)
	two, _ := new(big.Int).SetString("3125875175126190479447740508185965837690552500527637822603658699938581184513", 10)

		s1ver := new(big.Int).Add(one, two)
		s1ver.Mod(s1ver, q)
		fmt.Println(s1ver)


	s1, _ := new(big.Int).SetString("55561750350252380958895481016371931675381105001055275645207317399877162369026", 10)
	privOne := privKeyFromScalar(one)
	privTwo := privKeyFromScalar(two)
	sum := new(g2Point).Add(&privOne.PublicKey, &privTwo.PublicKey)
	privShare1 := privKeyFromScalar(s1)
	fmt.Println(sum.ToAffine())
	fmt.Println(privShare1.PublicKey)
}
*/

func TestCreateShares(t *testing.T) {
	// TODO
}

func TestPrivKeyFromShares(t *testing.T) {
	// TODO
}

func TestVerifyShare(t *testing.T) {
	// TODO
}
