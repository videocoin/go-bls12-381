package bls12

import (
	"fmt"
	"math/big"
	"testing"
)

func TestTwistPointAdd(t *testing.T) {
	testCases := []struct {
		a, b, expectedPoint *twistPoint
	}{

		{
			a: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			b: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: Fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: Fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: Fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: Fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: Fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
			},
		},
		{
			a: &twistPoint{
				x: fq2{
					c0: Fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: Fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: Fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: Fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: Fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: Fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
			},
			b: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{3073464934035803951, 8097377583023609158, 15409294543125092577, 16276328993493092712, 12538864579579517528, 916450636137241035},
					c1: Fq{1308859239175733497, 15863867032516748580, 17328356761155736507, 17462840905467442086, 6901595349449084968, 525950969689706658},
				},
				y: fq2{
					c0: Fq{357949772496509318, 16329481719841820421, 18244522398449518447, 7279381926772806620, 57887489201862977, 1520898536974121654},
					c1: Fq{16301606603926034254, 15067594749182283948, 10788114941244264190, 5246792798895342039, 2929678687212770719, 953241367565927221},
				},
				z: fq2{
					c0: Fq{11953202346449306623, 3050598053450526672, 16079861939592899998, 678848022907907235, 10352092543927197093, 1364931215270293501},
					c1: Fq{17078949991676835450, 17359288638360817022, 10472650286641916973, 10968087117859946658, 17842946367464055795, 470900195773534397},
				},
			},
		},
	}
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("A: %v, B: %v \n", testCase.a, testCase.b), func(t *testing.T) {
			result := new(twistPoint).Add(testCase.a, testCase.b)
			if !result.Equal(testCase.expectedPoint) {
				t.Errorf("expected %v, got %v\n", testCase.expectedPoint, result)
			}
		})
	}
}

func TestTwistPointDouble(t *testing.T) {
	testCases := []struct {
		point, expectedPoint *twistPoint
	}{
		{
			point: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: Fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: Fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: Fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: Fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: Fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
			},
		},
	}
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("Point: %v\n", testCase.point), func(t *testing.T) {
			result := new(twistPoint).Double(testCase.point)
			if !result.Equal(testCase.expectedPoint) {
				t.Errorf("expected %v, got %v\n", testCase.expectedPoint, result)
			}
		})
	}
}

func TestScalarMult(t *testing.T) {
	bigScalar, _ := new(big.Int).SetString("3312312312312412412412412412", 10)

	testCases := []struct {
		point         *twistPoint
		scalar        *big.Int
		expectedPoint *twistPoint
	}{

		{
			point:  g2Gen.p,
			scalar: new(big.Int).SetUint64(1),
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
		},
		{
			point:  g2Gen.p,
			scalar: big.NewInt(3),
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{3073464934035803951, 8097377583023609158, 15409294543125092577, 16276328993493092712, 12538864579579517528, 916450636137241035},
					c1: Fq{1308859239175733497, 15863867032516748580, 17328356761155736507, 17462840905467442086, 6901595349449084968, 525950969689706658},
				},
				y: fq2{
					c0: Fq{357949772496509318, 16329481719841820421, 18244522398449518447, 7279381926772806620, 57887489201862977, 1520898536974121654},
					c1: Fq{16301606603926034254, 15067594749182283948, 10788114941244264190, 5246792798895342039, 2929678687212770719, 953241367565927221},
				},
				z: fq2{
					c0: Fq{11953202346449306623, 3050598053450526672, 16079861939592899998, 678848022907907235, 10352092543927197093, 1364931215270293501},
					c1: Fq{17078949991676835450, 17359288638360817022, 10472650286641916973, 10968087117859946658, 17842946367464055795, 470900195773534397},
				},
			},
		},
		{
			point:  g2Gen.p,
			scalar: bigScalar,
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{258298954131270785, 6031199319403499511, 13215321372991054810, 10793028928194452699, 12545195150549532002, 418360014612507155},
					c1: Fq{363500408228787514, 5587318202130313330, 9540894848301847118, 5041453135017232261, 3487162834034077066, 1115149902004962792},
				},
				y: fq2{
					c0: Fq{6690345035233781621, 3562744566195686152, 8244649581155643263, 15071456266549040712, 3168554881749121049, 965636694296934801},
					c1: Fq{12585082243579685663, 14765898236155783342, 412546229312647833, 13721012784435188331, 17384506503505628828, 979823804858579181},
				},
				z: fq2{
					c0: Fq{15678942064029259612, 2194540089697254893, 10242369891462262537, 13003955447420839221, 15769587657955325728, 990175294458667147},
					c1: Fq{17389390864939335514, 9210534055547565855, 18395176412508403931, 13683204675781454352, 3094656600060504434, 1438144701997614361},
				},
			},
		},
	}
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("point: %v, scalar: %s\n", testCase.point, testCase.scalar.String()), func(t *testing.T) {
			result := new(twistPoint).ScalarMult(testCase.point, testCase.scalar)
			if !result.Equal(testCase.expectedPoint) {
				t.Errorf("expected %v, got %v\n", testCase.expectedPoint, result)
			}
		})
	}
}
