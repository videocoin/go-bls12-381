package bls12

import (
	"fmt"
	"testing"
)

func TestTwistPointAdd(t *testing.T) {
	testCases := []struct {
		a, b, expectedPoint *twistPoint
	}{
		{
			a: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			b: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: Fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: Fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: Fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: Fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: Fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
			},
		},
	}
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("A: %v, B: %v \n", testCase.a, testCase.b), func(t *testing.T) {
			result := new(twistPoint).Add(testCase.a, testCase.b)
			if !result.Equal(testCase.expectedPoint) {
				t.Errorf("expected %v, got %v\n", testCase.expectedPoint, result)
			}
		})
	}
}

func TestTwistPointDouble(t *testing.T) {
	testCases := []struct {
		point, expectedPoint *twistPoint
	}{
		{
			point: &twistPoint{
				x: fq2{
					c0: Fq{17722385409647053328, 12967546844987299354, 11648722842835150208, 10994581490347323113, 8027586497049998955, 396758299565931735},
					c1: Fq{11937283898719073798, 12295044263989567683, 4301357764460312582, 1953074377943790439, 14030662337566180679, 1266120665323335155},
				},
				y: fq2{
					c0: Fq{5508758831087832138, 6448303779119275098, 16710190169160573786, 13542242618704742751, 563980702369916322, 37152010398653157},
					c1: Fq{12520284671833321565, 1777275927576994268, 9704602344324656032, 8739618045342622522, 16651875250601773805, 804950956836789234},
				},
				z: fq2{
					c0: Fq{8505329371266088957, 17002214543764226050, 6865905132761471162, 8632934651105793861, 6631298214892334189, 1582556514881692819},
					c1: Fq{},
				},
			},
			expectedPoint: &twistPoint{
				x: fq2{
					c0: Fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: Fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: Fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: Fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: Fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: Fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
			},
		},
	}
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("Point: %v\n", testCase.point), func(t *testing.T) {
			result := new(twistPoint).Double(testCase.point)
			if !result.Equal(testCase.expectedPoint) {
				t.Errorf("expected %v, got %v\n", testCase.expectedPoint, result)
			}
		})
	}
}

/*
func TestScalarMult(t *testing.T) {
	testCases := []struct {
		point         *twistPoint
		scalar        *big.Int
		expectedPoint *twistPoint
	}{
		{
			point:         g2Generator,
			scalar:        big1,
			expectedPoint: g2Generator,
		},
	}
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("point: %v, scalar: %s\n", testCase.point, testCase.scalar.String()), func(t *testing.T) {
			result := new(twistPoint).ScalarMult(testCase.point, testCase.scalar)
			if !result.Equal(testCase.expectedPoint) {
				t.Errorf("expected %v, got %v\n", testCase.expectedPoint, result)
			}
		})
	}
}
*/
