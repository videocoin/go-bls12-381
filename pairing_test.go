package bls12

import (
	"testing"
)

func TestDoublingAndLine(t *testing.T) {
	tests := map[string]struct {
		r          twistPoint
		q          curvePoint
		sum        twistPoint
		c0, c1, c2 fq2
	}{
		"generators": {
			r: g2Gen.p,
			q: g1Gen.p,
			sum: twistPoint{
				x: fq2{
					c0: fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
				t: fq2{
					c0: fq{2479102912020959017, 10722268567385474423, 13289556181135529208, 4512094221475391506, 12211932142090328446, 39809536495906285},
					c1: fq{11067673534491706930, 11698074723089032805, 13863324334702109868, 4016582360159746237, 11745809971357640131, 69383136753245690},
				},
			},
			c0: fq2{
				c0: fq{16521250154091893390, 11550767693645120122, 3517755699210907354, 8035647930683680220, 4019796556552419771, 451420072861892737},
				c1: fq{18293378936511423336, 13143741527255503601, 7522477062776238534, 11407560980233213841, 15716159397276202569, 1403106181814332372},
			},
			c1: fq2{
				c0: fq{4449984651635275401, 11680217845942513937, 11140531346451103816, 10500440204658996834, 16771094099020012859, 527545683060335776},
				c1: fq{18097767337011887344, 12600677166075290804, 13638019292209587518, 16188658819672867276, 12891218261365710021, 1175533863824620827},
			},
			c2: fq2{
				c0: fq{11033082401322288522, 16152799148149621672, 5480658672849822104, 12178979763090086206, 16683590538352871296, 1233599904214129433},
				c1: fq{9019646775837872212, 2854805697774761111, 7183090960508055194, 11070723832269891145, 15933306181532061767, 354030584485544670},
			},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			sum, c0, c1, c2 := doublingAndLine(&tc.r, &tc.q)
			if *sum != tc.sum {
				t.Fatalf("[sum] expected: %v, got: %v", tc.sum, sum)
			}
			if *c0 != tc.c0 {
				t.Fatalf("[c0] expected: %v, got: %v", tc.c0, c0)
			}
			if *c1 != tc.c1 {
				t.Fatalf("[c1] expected: %v, got: %v", tc.c1, c1)
			}
			if *c2 != tc.c2 {
				t.Fatalf("[c2] expected: %v, got: %v", tc.c2, c2)
			}
		})
	}
}

func TestMixedAdditionAndLine(t *testing.T) {
	tests := map[string]struct {
		r, p       twistPoint
		q          curvePoint
		sum        twistPoint
		c0, c1, c2 fq2
	}{
		"2 g2Gen + g2Gen": {
			r: twistPoint{
				x: fq2{
					c0: fq{6678513423137867545, 18260408852901968515, 1300099136812502586, 13908703759030401652, 5588229034675639433, 1006660745260603955},
					c1: fq{1025860078761578626, 5092236050892521612, 11476369764117918185, 13106660457763168267, 5146802492682664044, 656488645961307256},
				},
				y: fq2{
					c0: fq{6224254841733980841, 6521832302964053259, 4116447281155316877, 8628120253062263325, 7279124987201866958, 302205894068729336},
					c1: fq{7692990083871816071, 10629180326525807510, 2016401520256486816, 7691932958455317254, 14188631645743154258, 58120792278709281},
				},
				z: fq2{
					c0: fq{11017517662175664276, 12896607558238550196, 14973636264611595956, 8637741163699933887, 1127961404739832645, 74304020797306314},
					c1: fq{6593825269957091514, 3554551855153988537, 962460614939760448, 17479236090685245045, 14857006427493995994, 1609901913673578469},
				},
				t: fq2{
					c0: fq{2479102912020959017, 10722268567385474423, 13289556181135529208, 4512094221475391506, 12211932142090328446, 39809536495906285},
					c1: fq{11067673534491706930, 11698074723089032805, 13863324334702109868, 4016582360159746237, 11745809971357640131, 69383136753245690},
				},
			},
			p: g2Gen.p,
			q: g1Gen.p,
			sum: twistPoint{
				x: fq2{
					c0: fq{3073464934035803951, 8097377583023609158, 15409294543125092577, 16276328993493092712, 12538864579579517528, 916450636137241035},
					c1: fq{1308859239175733497, 15863867032516748580, 17328356761155736507, 17462840905467442086, 6901595349449084968, 525950969689706658},
				},
				y: fq2{
					c0: fq{357949772496509318, 16329481719841820421, 18244522398449518447, 7279381926772806620, 57887489201862977, 1520898536974121654},
					c1: fq{16301606603926034254, 15067594749182283948, 10788114941244264190, 5246792798895342039, 2929678687212770719, 953241367565927221},
				},
				z: fq2{
					c0: fq{11953202346449306623, 3050598053450526672, 16079861939592899998, 678848022907907235, 10352092543927197093, 1364931215270293501},
					c1: fq{17078949991676835450, 17359288638360817022, 10472650286641916973, 10968087117859946658, 17842946367464055795, 470900195773534397},
				},
				t: fq2{
					c0: fq{8962611273901080372, 9626174319946664065, 8871756662194626743, 12757831183498185173, 412851602001999580, 1472327618715634811},
					c1: fq{17167744678796076906, 11938401385695516266, 6160162599657869957, 11042988257713378349, 17065341973155684361, 155373545633754601},
				},
			},
			c0: fq2{
				c0: fq{8412686052086419976, 4298103231448881149, 12426761012621373764, 9797384626356475286, 4880257091483398955, 1700766161475439258},
				c1: fq{14599206306567720967, 6514623040218909049, 10929525366887481279, 1094270398610339971, 4532962460045086297, 150056940405486693},
			},
			c1: fq2{
				c0: fq{17891348176464923823, 16502872711794994352, 16490845695617126940, 12947994348084394185, 9364829623722584513, 1640606136988420491},
				c1: fq{11581203926615495985, 7906137875318401443, 6924821831914519203, 50103757191979550, 16323309103202175431, 245892675953930727},
			},
			c2: fq2{
				c0: fq{1479519801407193310, 17508464647728848004, 17507596365531753784, 6154920309605392390, 15254002579583482069, 1822945486788368743},
				c1: fq{3548181256008829279, 9898087578157045780, 1085221305580937632, 13732970398266668969, 6416686029525471744, 997771369979662996},
			},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			sum, c0, c1, c2 := mixedAdditionAndLine(&tc.r, &tc.p, &tc.q, new(fq2).Sqr(&tc.p.y))
			if *sum != tc.sum {
				t.Fatalf("[sum] expected: %v, got: %v", tc.sum, sum)
			}
			if *c0 != tc.c0 {
				t.Fatalf("[c0] expected: %v, got: %v", tc.c0, c0)
			}
			if *c1 != tc.c1 {
				t.Fatalf("[c1] expected: %v, got: %v", tc.c1, c1)
			}
			if *c2 != tc.c2 {
				t.Fatalf("[c2] expected: %v, got: %v", tc.c2, c2)
			}
		})
	}
}

func TestMiller(t *testing.T) {
	tests := map[string]struct {
		g1   g1Point
		g2   g2Point
		want fq12
	}{
		"generators": {
			g1: *g1Gen,
			g2: *g2Gen,
			want: fq12{
				c0: fq6{
					c0: fq2{
						c0: fq{11558388265913876128, 14850420127807629514, 6046474870617778494, 6779233911971358600, 13696001093373687565, 261822324908526961},
						c1: fq{12203684581517952817, 6708208815341252471, 1524597664992121342, 1180817665866471062, 1781675459632034255, 50010617062997911},
					},
					c1: fq2{
						c0: fq{1947894791635330103, 627281399122580528, 3762985140007021290, 8827783829384606556, 18145449931574111434, 479575753674618710},
						c1: fq{6861007472836480393, 10899737056275918819, 2418710895653277966, 5249604997176665985, 5938822437349287011, 1468646680611589632},
					},
					c2: fq2{
						c0: fq{454505322886490363, 3209403111461739769, 12592831522280934068, 15439306624768431482, 12915316384292503055, 1140056262060344522},
						c1: fq{14194371715582365546, 9688576186281833284, 11755380963763109271, 6083723264541086719, 905690626095759187, 229969960730710257},
					},
				},
				c1: fq6{
					c0: fq2{
						c0: fq{3861024476311919697, 12266819192307275063, 727797037005839921, 5943303485782430899, 9893738810118568186, 522025405106391158},
						c1: fq{1490424296401086760, 13272096738693175186, 9103584253526001576, 14340692882246452594, 756584163883660225, 268360595851482655},
					},
					c1: fq2{
						c0: fq{4347702021005978212, 10285952132004064329, 11684943705103622585, 3798328300323917479, 6438604224992922571, 1329038988721983715},
						c1: fq{10984318177088629784, 17980972154108779830, 1950984863690709344, 10314772535592520465, 11903125373049372572, 1543805252256095488},
					},
					c2: fq2{
						c0: fq{4421267312586963135, 8026754065653348347, 10147848509093055825, 8918505105067589187, 6135164558030478964, 823003395432648931},
						c1: fq{1316884195573945052, 12895268979703701402, 1909525378962548106, 488846688288745245, 8939906150262096836, 1068563089697276396},
					},
				},
			},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			got := miller(&tc.g1.p, &tc.g2.p)
			if *got != tc.want {
				t.Fatalf("expected: %v, got: %v", tc.want, got)
			}
		})
	}
}

func TestFinalExp(t *testing.T) {
	tests := map[string]struct {
		input, want fq12
	}{

		"finalExp(1) = 1": {
			input: fq12{c0: fq6{c0: fq2{c0: fq{0x760900000002fffd, 0xebf4000bc40c0002, 0x5f48985753c758ba, 0x77ce585370525745, 0x5c071a97a256ec6d, 0x15f65ec3fa80e493}}}},
			want:  fq12{c0: fq6{c0: fq2{c0: fq{0x760900000002fffd, 0xebf4000bc40c0002, 0x5f48985753c758ba, 0x77ce585370525745, 0x5c071a97a256ec6d, 0x15f65ec3fa80e493}}}},
		},

		"finalExp(miller(g1Gen, g2Gen))": {
			input: fq12{
				c0: fq6{
					c0: fq2{
						c0: fq{11558388265913876128, 14850420127807629514, 6046474870617778494, 6779233911971358600, 13696001093373687565, 261822324908526961},
						c1: fq{12203684581517952817, 6708208815341252471, 1524597664992121342, 1180817665866471062, 1781675459632034255, 50010617062997911},
					},
					c1: fq2{
						c0: fq{1947894791635330103, 627281399122580528, 3762985140007021290, 8827783829384606556, 18145449931574111434, 479575753674618710},
						c1: fq{6861007472836480393, 10899737056275918819, 2418710895653277966, 5249604997176665985, 5938822437349287011, 1468646680611589632},
					},
					c2: fq2{
						c0: fq{454505322886490363, 3209403111461739769, 12592831522280934068, 15439306624768431482, 12915316384292503055, 1140056262060344522},
						c1: fq{14194371715582365546, 9688576186281833284, 11755380963763109271, 6083723264541086719, 905690626095759187, 229969960730710257},
					},
				},
				c1: fq6{
					c0: fq2{
						c0: fq{3861024476311919697, 12266819192307275063, 727797037005839921, 5943303485782430899, 9893738810118568186, 522025405106391158},
						c1: fq{1490424296401086760, 13272096738693175186, 9103584253526001576, 14340692882246452594, 756584163883660225, 268360595851482655},
					},
					c1: fq2{
						c0: fq{4347702021005978212, 10285952132004064329, 11684943705103622585, 3798328300323917479, 6438604224992922571, 1329038988721983715},
						c1: fq{10984318177088629784, 17980972154108779830, 1950984863690709344, 10314772535592520465, 11903125373049372572, 1543805252256095488},
					},
					c2: fq2{
						c0: fq{4421267312586963135, 8026754065653348347, 10147848509093055825, 8918505105067589187, 6135164558030478964, 823003395432648931},
						c1: fq{1316884195573945052, 12895268979703701402, 1909525378962548106, 488846688288745245, 8939906150262096836, 1068563089697276396},
					},
				},
			},

			want: fq12{
				c0: fq6{
					c0: fq2{
						c0: fq{1833778908674098629, 10940135709871646008, 14469595491885370873, 14913175881451308564, 11966403029181413248, 1437568066627491877},
						c1: fq{15160015403425294741, 11342496543937232509, 11284658528271854226, 17618113228161746858, 11631679852104167526, 593530325556397176},
					},
					c1: fq2{
						c0: fq{6476846807490410049, 2816639779045545485, 14476076704226712645, 854289583575002536, 10158043504186337989, 1357474178050521694},
						c1: fq{6901856076470247221, 3792152084032873317, 15794447866332370476, 18189857103975979275, 11614596478718820880, 1667299683924412553},
					},
					c2: fq2{
						c0: fq{10617393529686755192, 4897202276192187781, 3567883303013294047, 18047005495499791862, 7269221731679377840, 1702263405386698527},
						c1: fq{7433765206450958098, 941737984852750699, 11836606406970901870, 13843222440791661477, 7413152441349395753, 429433089456718649},
					},
				},
				c1: fq6{
					c0: fq2{
						c0: fq{15207117319800276601, 6540750982395757316, 15044332445620971789, 14795504289261750215, 17348569415570950896, 658754416854642350},
						c1: fq{11470112406866973014, 16344064576580025875, 5520926743417199604, 11810793736472093633, 9370321895320649760, 1562574812092930764},
					},
					c1: fq2{
						c0: fq{8977193084816800433, 8352831996646950585, 5933166268838589628, 10062194967764290187, 334343859671060077, 1776189050943205034},
						c1: fq{13511897413297688358, 3049631480761760069, 18162706820793124512, 8167504369816721655, 8989473046439478774, 286057374490027367},
					},
					c2: fq2{
						c0: fq{9257390537406998103, 2078389900358027886, 12802143409160140646, 14528883079759720004, 10238260730210410490, 902613341589028802},
						c1: fq{16721850712242454449, 8544676805529473132, 8467638379015603476, 17683295826703475938, 11127716086834177532, 1837080836145357378},
					},
				},
			},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			got := finalExp(&tc.input)
			if *got != tc.want {
				t.Fatalf("expected: %v, got: %v", tc.want, got)
			}
		})
	}
}

func TestPair(t *testing.T) {
	/*
		tests := map[string]struct {
			a    g1Point
			b    g2Point
			want fq12
		}{
			"generators": {
				a: *g1Gen,
				b: *g2Gen,
				want: fq12{
					c0: fq6{
						c0: fq2{},
						c1: fq2{},
						c2: fq2{},
					},
				},
			},
		}
		for name, tc := range tests {
			t.Run(name, func(t *testing.T) {
				got := Pair(&tc.a, &tc.b)
				if *got != tc.want {
					t.Fatalf("expected: %v, got: %v", tc.want, got)
				}
			})
		}
	*/
}
