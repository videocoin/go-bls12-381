package bls12

import "testing"

func TestDoublingAndLine(t *testing.T) {
	// TODO
}

func TestMixedAdditionAndLine(t *testing.T) {
	// TODO
}

/*
func TestMiller(t *testing.T) {
	tests := map[string]struct {
		g1   g1Point
		g2   g2Point
		want fq12
	}{
		"generators": {
			g1: *g1Gen,
			g2: *g2Gen,
			want: fq12{
				c0: fq6{
					c0: fq2{
						c0: fq{11558388265913876128, 14850420127807629514, 6046474870617778494, 6779233911971358600, 13696001093373687565, 261822324908526961},
						c1: fq{12203684581517952817, 6708208815341252471, 1524597664992121342, 1180817665866471062, 1781675459632034255, 50010617062997911},
					},
					c1: fq2{
						c0: fq{1947894791635330103, 627281399122580528, 3762985140007021290, 8827783829384606556, 18145449931574111434, 479575753674618710},
						c1: fq{6861007472836480393, 10899737056275918819, 2418710895653277966, 5249604997176665985, 5938822437349287011, 1468646680611589632},
					},
					c2: fq2{
						c0: fq{454505322886490363, 3209403111461739769, 12592831522280934068, 15439306624768431482, 12915316384292503055, 1140056262060344522},
						c1: fq{14194371715582365546, 9688576186281833284, 11755380963763109271, 6083723264541086719, 905690626095759187, 229969960730710257},
					},
				},
				c1: fq6{
					c0: fq2{
						c0: fq{3861024476311919697, 12266819192307275063, 727797037005839921, 5943303485782430899, 9893738810118568186, 522025405106391158},
						c1: fq{1490424296401086760, 13272096738693175186, 9103584253526001576, 14340692882246452594, 756584163883660225, 268360595851482655},
					},
					c1: fq2{
						c0: fq{4347702021005978212, 10285952132004064329, 11684943705103622585, 3798328300323917479, 6438604224992922571, 1329038988721983715},
						c1: fq{10984318177088629784, 17980972154108779830, 1950984863690709344, 10314772535592520465, 11903125373049372572, 1543805252256095488},
					},
					c2: fq2{
						c0: fq{4421267312586963135, 8026754065653348347, 10147848509093055825, 8918505105067589187, 6135164558030478964, 823003395432648931},
						c1: fq{1316884195573945052, 12895268979703701402, 1909525378962548106, 488846688288745245, 8939906150262096836, 1068563089697276396},
					},
				},
			},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			got := miller(&tc.g1.p, &tc.g2.p)
			if *got != tc.want {
				t.Fatalf("expected: %v, got: %v", tc.want, got)
			}
		})
	}
}
*/

func TestFinalExp(t *testing.T) {
	// TODO
}

func TestPair(t *testing.T) {
	/*
		tests := map[string]struct {
			a    g1Point
			b    g2Point
			want fq12
		}{
			"generators": {
				a: *g1Gen,
				b: *g2Gen,
				want: fq12{
					c0: fq6{
						c0: fq2{},
						c1: fq2{},
						c2: fq2{},
					},
				},
			},
		}
		for name, tc := range tests {
			t.Run(name, func(t *testing.T) {
				got := Pair(&tc.a, &tc.b)
				if *got != tc.want {
					t.Fatalf("expected: %v, got: %v", tc.want, got)
				}
			})
		}
	*/
}
